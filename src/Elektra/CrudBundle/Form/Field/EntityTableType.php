<?php

namespace Elektra\CrudBundle\Form\Field;

use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\Common\Persistence\ObjectManager;
use Elektra\CrudBundle\Crud\Definition;
use Symfony\Bridge\Doctrine\Form\ChoiceList\EntityChoiceList;
use Symfony\Bridge\Doctrine\Form\DataTransformer\CollectionToArrayTransformer;
use Symfony\Bridge\Doctrine\Form\EventListener\MergeDoctrineCollectionListener;
use Symfony\Bridge\Doctrine\Form\Type\DoctrineType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Exception\RuntimeException;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\Options;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class EntityTableType extends EntityType
{

    public function getName()
    {

        return 'entityTable';
    }

    //    public function getParent()
    //    {
    //
    //        return 'entity';
    //    }

    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {

        parent::setDefaultOptions($resolver);

        $resolver->setDefaults(
            array(
                'property'   => 'title',
                'selectable' => true,
            )
        );

        $resolver->setRequired(
            array(
                'crud',
                'child',
                'parent',
            )
        );

        $resolver->setAllowedTypes(
            array(
                'crud'   => 'Elektra\CrudBundle\Crud\Crud',
                'child'  => 'Elektra\CrudBundle\Crud\Definition',
                'parent' => 'Elektra\CrudBundle\Crud\Definition',
            )
        );
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {

        //        echo 'A';
        //
        //        echo $options['property'];

        parent::buildForm($builder, $options);
    }

    public function buildView(FormView $view, FormInterface $form, array $options)
    {

        //        echo 'B';
        $child  = $options['child'];
        $parent = $options['parent'];
        $crud   = $options['crud'];
        $selectable = $options['selectable'];
        if ($child instanceof Definition) {
            $tableClass = $child->getClassTable();
            $table      = new $tableClass($crud);
            $table->setEntries($options['choice_list']->getChoices());
            if($selectable) {
                $table->setSelectable();
            }
            $table->setInView(true);
            //echo $child->getName().'<br />';
            //            echo $parent->getName().'<br />';
            $view->vars = array_replace(
                $view->vars,
                array(
                    'crud'   => $crud,
                    'child'  => $child,
                    'parent' => $parent,
                    'table'  => $table,
                    'group_body' => false,
                )
            );
            //            foreach($table->getEntries() as $k => $v) {
            //                echo $k.' => '.get_class($v).'<br />';
            //            }
            //            $choices = $options['choices'];
            //            $choiceList = $options['choice_list'];
            //            if($choiceList instanceof EntityChoiceList) {
            //                echo count($choiceList->getChoices());
            //            }
            //            echo count($choices);
        }

        parent::buildView($view, $form, $options); // TODO: Change the autogenerated stub
    }

    public function finishView(FormView $view, FormInterface $form, array $options)
    {

        //        echo 'C';
        parent::finishView($view, $form, $options); // TODO: Change the autogenerated stub
    }
}