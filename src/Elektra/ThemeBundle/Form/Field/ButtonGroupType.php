<?php


namespace Elektra\ThemeBundle\Form\Field;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Button;
use Symfony\Component\Form\ButtonBuilder;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class ButtonGroupType extends AbstractType
{

    /**
     * {@inheritdoc}
     */
    public function getName()
    {

        return 'buttongroup';
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {

        foreach ($options['buttons'] as $name => $config) {
            // add the single buttons to this type
            $this->addButton($builder, $name, $config)->getForm();
        }
    }

    /**
     * {@inheritdoc}
     */
    public function buildView(FormView $view, FormInterface $form, array $options)
    {

        if ($form->count() == 0) {
            return;
        }

        array_map(array($this, 'validateButton'), $form->all());
    }

    protected function addButton(FormBuilderInterface $builder, $name, $config)
    {

        $options = array();
        if (isset($config['options'])) {
            $options = $config['options'];
        }

        $button = $builder->add($name, $config['type'], $options);

        if (!$button instanceof ButtonBuilder) {
            //            var_dump($button->getType());
            //            $builder->remove('name');
            //            echo 'INVALID TYPE ' . $config['type'] . ' at ' . $name . '<br />';
        }

        return $button;
    }

    protected function validateButton(FormInterface $field)
    {

        if (!$field instanceof Button) {
            throw new \InvalidArgumentException("Children of FormActionsType must be instances of the Button class");
        }
    }

    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {

        $resolver->setDefaults(
            array(
                'buttons' => array(),
                'options' => array(),
                'mapped'  => false,
            )
        );
    }










    //    public function buildForm(FormBuilderInterface $builder, array $options)
    //    {
    //
    //        $buttons = array();
    //        foreach ($options['buttons'] as $name => $config) {
    //            $buttons[] = $this->createButton($builder, $name, $config)->getForm();
    //        }
    //
    //        $builder->setAttribute('buttons', $buttons);
    //    }
    //
    //    public function buildView(FormView $view, FormInterface $form, array $options)
    //    {
    //
    //        if (!$form->getConfig()->hasAttribute('buttons')) {
    //            return;
    //        }
    //
    //        $view->vars['buttons'] = array_map(
    //            function ($button) use ($view) {
    //
    //                return $button->createView($view);
    //            },
    //            $form->getConfig()->getAttribute('buttons')
    //        );
    //    }
    //
    //    protected function createButton(FormBuilderInterface $builder, $name, $config)
    //    {
    //
    //        $options = (isset($config['options'])) ? $config['options'] : array();
    //        $button  = $builder->add($name, $config['type'], $options);
    //echo get_class($button);
    //        if (!$button instanceof ButtonBuilder) {
    ////            throw new \InvalidArgumentException("The ButtonRowType only accepts buttons, got type '{$config['type']}' for field '$name'");
    //        }
    //
    //        return $button;
    //    }
    //
    //    public function setDefaultOptions(OptionsResolverInterface $resolver)
    //    {
    //
    //        $resolver->setDefaults(
    //            array(
    //                'buttons' => array(),
    //                'options' => array(),
    //                'mapped'  => false,
    //            )
    //        );
    //    }
    //
    //
    //
    //
    //
    //
    //
    //
    //    //    public function buildForm(FormBuilderInterface $builder, array $options)
    //    //    {
    //    //
    //    //echo 'buildForm';
    //    //        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
    //    //    }
    //    //
    //    //    public function buildView(FormView $view, FormInterface $form, array $options)
    //    //    {
    //    //echo 'buildView';
    //    //        parent::buildView($view, $form, $options); // TODO: Change the autogenerated stub
    //    //    }
    //
    //    /**
    //     * Returns the name of this type.
    //     *
    //     * @return string The name of this type
    //     */
    //    public function getName()
    //    {
    //
    //        return 'buttonrow';
    //    }
}